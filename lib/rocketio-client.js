// Generated by CoffeeScript 1.6.3
var CometIO, RocketIO, WebSocketIO, events, request,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

events = require('events');

request = require('request');

RocketIO = (function(_super) {
  __extends(RocketIO, _super);

  function RocketIO(url, opts) {
    this.url = url;
    if (opts == null) {
      opts = {
        type: 'websocket'
      };
    }
    this.push = __bind(this.push, this);
    this.type = opts.type;
    this.config = {};
  }

  RocketIO.prototype.connect = function() {
    var _this = this;
    request("" + this.url + "/rocketio/settings", function(err, res, body) {
      if (err || res.statusCode !== 200) {
        return;
      }
      _this.config = JSON.parse(body);
      _this.io = (function() {
        switch (this.type) {
          case 'websocket':
            return new WebSocketIO(this);
          case 'comet':
            return new CometIO(this);
        }
      }).call(_this);
      _this.io.on('connect', function() {
        return _this.emit('connect', _this);
      });
      return _this.io.on('disconnect', function() {
        return _this.emit('disconnect', _this);
      });
    });
    return this;
  };

  RocketIO.prototype.push = function(type, data) {
    return this.io.push(type, data);
  };

  return RocketIO;

})(events.EventEmitter);

WebSocketIO = (function(_super) {
  var WebSocket;

  __extends(WebSocketIO, _super);

  WebSocket = require('ws');

  function WebSocketIO(rocketio) {
    var _this = this;
    this.rocketio = rocketio;
    this.connecting = false;
    this.on('disconnect', function() {
      return setTimeout(function() {
        return _this.connect();
      }, 5000);
    });
    this.connect();
  }

  WebSocketIO.prototype.connect = function() {
    var _this = this;
    this.ws = new WebSocket(this.rocketio.config.websocket);
    this.ws.on('error', function(err) {
      _this.connecting = false;
      return _this.emit('disconnect');
    });
    this.ws.on('close', function() {
      _this.connecting = false;
      return _this.emit('disconnect');
    });
    this.ws.on('open', function() {
      _this.connecting = true;
      return _this.emit('connect');
    });
    return this.ws.on('message', function(data, flags) {
      data = JSON.parse(data);
      return _this.rocketio.emit(data.type, data.data);
    });
  };

  WebSocketIO.prototype.push = function(type, data) {
    if (!this.connecting) {
      return;
    }
    return this.ws.send(JSON.stringify({
      type: type,
      data: data
    }));
  };

  return WebSocketIO;

})(events.EventEmitter);

CometIO = (function(_super) {
  __extends(CometIO, _super);

  function CometIO(rocketio) {
    var _this = this;
    this.rocketio = rocketio;
    this.post_queue = [];
    this.on('__session_id', function(id) {
      _this.session_id = id;
      return _this.emit('connect');
    });
    this.get();
    setInterval(function() {
      return _this.flush();
    }, 1000);
  }

  CometIO.prototype.get = function() {
    var url,
      _this = this;
    url = (function() {
      switch (typeof this.session_id) {
        case 'string':
          return this.rocketio.config.comet + ("?session=" + this.session_id);
        default:
          return this.rocketio.config.comet;
      }
    }).call(this);
    return request(url, function(err, res, body) {
      var data, data_arr, _i, _len, _results;
      if (err || res.statusCode !== 200) {
        setTimeout(function() {
          return _this.get();
        }, 10000);
        return;
      }
      data_arr = JSON.parse(body);
      if (!(data_arr instanceof Array)) {
        return;
      }
      setTimeout(function() {
        return _this.get();
      }, 10);
      _results = [];
      for (_i = 0, _len = data_arr.length; _i < _len; _i++) {
        data = data_arr[_i];
        _this.emit(data.type, data.data);
        _results.push(_this.rocketio.emit(data.type, data.data));
      }
      return _results;
    });
  };

  CometIO.prototype.push = function(type, data) {
    if (!this.session_id) {
      return;
    }
    return this.post_queue.push({
      type: type,
      data: data
    });
  };

  CometIO.prototype.flush = function() {
    var post_data,
      _this = this;
    if (this.post_queue.length < 1) {
      return;
    }
    post_data = {
      json: JSON.stringify({
        session: this.session_id,
        events: this.post_queue
      })
    };
    return request.post({
      url: this.rocketio.config.comet,
      form: post_data
    }, function(err, res, body) {
      if (err || res.statusCode !== 200) {
        return;
      }
      return _this.post_queue = [];
    });
  };

  return CometIO;

})(events.EventEmitter);

module.exports = RocketIO;
